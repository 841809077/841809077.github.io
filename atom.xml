<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>━Start。平常心_</title>
  
  <subtitle>作者：create17，座右铭：每一个成功人士的背后，必定曾经做出过勇敢而又孤独的决定。放弃不难，但坚持很酷~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://841809077.github.io/"/>
  <updated>2024-07-18T08:55:01.407Z</updated>
  <id>https://841809077.github.io/</id>
  
  <author>
    <name>create17</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Elasticsearch Query DSL 查询</title>
    <link href="https://841809077.github.io/2023/03/13/ELK/Elasticsearch/API/es-query-dsl.html"/>
    <id>https://841809077.github.io/2023/03/13/ELK/Elasticsearch/API/es-query-dsl.html</id>
    <published>2023-03-13T08:25:07.000Z</published>
    <updated>2024-07-18T08:55:01.407Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>复合查询除布尔查询，还有其他查询，可见官网：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/compound-queries.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/compound-queries.html</a></p><a id="more"></a><p>布尔查询支持的子查询类型共有四种，分别是：<br>查询上下文：</p><ul><li>must：文档必须匹配must查询条件，贡献评分</li><li>should：文档应该匹配should子句查询的一个或多个，贡献评分<br>过滤上下文：</li><li>must_not：文档不能匹配该查询条件，不贡献评分</li><li>filter：过滤器，文档必须匹配该过滤条件，跟must子句的唯一区别是，filter不贡献评分；</li></ul><h3 id="1、match-Query："><a href="#1、match-Query：" class="headerlink" title="1、match Query："></a>1、match Query：</h3><p>全文匹配，先分词再匹配，用于模糊查询</p><h3 id="2、term-Query："><a href="#2、term-Query：" class="headerlink" title="2、term Query："></a>2、term Query：</h3><p>精准查询</p><h3 id="3、单条件查询"><a href="#3、单条件查询" class="headerlink" title="3、单条件查询"></a>3、单条件查询</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">"query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "filter": &#123;</span><br><span class="line">        "term": &#123;</span><br><span class="line">          "SourceName": "料斗温度"</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、多查询条件-and"><a href="#4、多查询条件-and" class="headerlink" title="4、多查询条件 and"></a>4、多查询条件 and</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"filter"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"range"</span>: &#123;</span><br><span class="line">            <span class="attr">"Time"</span>: &#123;</span><br><span class="line">              <span class="attr">"lt"</span>: <span class="number">1663921028000</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"term"</span>: &#123;</span><br><span class="line">            <span class="attr">"SourceName"</span>: <span class="string">"料斗温度"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、Filter"><a href="#5、Filter" class="headerlink" title="5、Filter"></a>5、Filter</h3><p>搜索精确值、范围值</p><h3 id="6、Query"><a href="#6、Query" class="headerlink" title="6、Query"></a>6、Query</h3><p>模棱两可的结果，全文搜索</p><p>term在查询时只能精确查询，match是全文查询，而字段类型为keyword的内容不管用哪种方式，都只能精确查询</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "15743-1570943068343-906",        "name": "大数据实战演练",        "qrcode": "https://gcore.jsdelivr.net/gh/841809077/blog-img/20181110/20181118235726.jpg",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;复合查询除布尔查询，还有其他查询，可见官网：&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/compound-queries.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/compound-queries.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ELK" scheme="https://841809077.github.io/categories/ELK/"/>
    
    
  </entry>
  
  <entry>
    <title>Elasticsearch查询报错：FIELDDATA Data is too large</title>
    <link href="https://841809077.github.io/2022/11/09/ELK/Elasticsearch/%E7%96%91%E9%9A%BE%E9%97%AE%E9%A2%98/fielddata-data-too-large.html"/>
    <id>https://841809077.github.io/2022/11/09/ELK/Elasticsearch/疑难问题/fielddata-data-too-large.html</id>
    <published>2022-11-09T07:17:22.000Z</published>
    <updated>2022-11-17T03:38:51.058Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h3 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h3><p><img src="https://gcore.jsdelivr.net/gh/841809077/blog-img/202208/20221109170611.jpg" alt></p><p>今天发现查询 Elasticsearch 报错了，FIELDDATA Data is too large</p><p>在 text 类型的字段上进行聚合和排序时会使用 fileddata 数据结构，可能占用较大内存。可通过以下命令查看索引的 fielddata 内存占用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H 'Content-type: application/json' -XGET 'http://x.x.x.x:9200/_cat/indices?v&amp;h=index,fielddata.memory_size&amp;s=fielddata.memory_size:desc'</span><br></pre></td></tr></table></figure><p>如果</p><a id="more"></a><p>参考自：</p><ul><li><a href="https://cloud.tencent.com/document/product/845/56272" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/845/56272</a></li><li><a href="https://blog.csdn.net/hereiskxm/article/details/46744985" target="_blank" rel="noopener">https://blog.csdn.net/hereiskxm/article/details/46744985</a></li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "15743-1570943068343-906",        "name": "大数据实战演练",        "qrcode": "https://gcore.jsdelivr.net/gh/841809077/blog-img/20181110/20181118235726.jpg",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、前言&quot;&gt;&lt;a href=&quot;#1、前言&quot; class=&quot;headerlink&quot; title=&quot;1、前言&quot;&gt;&lt;/a&gt;1、前言&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://gcore.jsdelivr.net/gh/841809077/blog-img/202208/20221109170611.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;今天发现查询 Elasticsearch 报错了，FIELDDATA Data is too large&lt;/p&gt;
&lt;p&gt;在 text 类型的字段上进行聚合和排序时会使用 fileddata 数据结构，可能占用较大内存。可通过以下命令查看索引的 fielddata 内存占用：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -H &#39;Content-type: application/json&#39; -XGET &#39;http://x.x.x.x:9200/_cat/indices?v&amp;amp;h=index,fielddata.memory_size&amp;amp;s=fielddata.memory_size:desc&#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果&lt;/p&gt;
    
    </summary>
    
      <category term="ELK" scheme="https://841809077.github.io/categories/ELK/"/>
    
    
  </entry>
  
  <entry>
    <title>Elasticsearch bool复合查询</title>
    <link href="https://841809077.github.io/2022/10/12/ELK/Elasticsearch/Client/elasticsearch-bool-query.html"/>
    <id>https://841809077.github.io/2022/10/12/ELK/Elasticsearch/Client/elasticsearch-bool-query.html</id>
    <published>2022-10-12T07:07:28.000Z</published>
    <updated>2022-11-17T02:03:26.332Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><blockquote><p>版本</p><p>Elasticsearch: 7.6.2</p></blockquote><p><a href="https://juejin.cn/post/6871109774566653965" target="_blank" rel="noopener">https://juejin.cn/post/6871109774566653965</a></p><p><a href="https://learnku.com/articles/36224" target="_blank" rel="noopener">https://learnku.com/articles/36224</a></p><p><a href="https://www.cnblogs.com/ljhdo/p/5040252.html" target="_blank" rel="noopener">https://www.cnblogs.com/ljhdo/p/5040252.html</a></p><a id="more"></a></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "15743-1570943068343-906",        "name": "大数据实战演练",        "qrcode": "https://gcore.jsdelivr.net/gh/841809077/blog-img/20181110/20181118235726.jpg",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;版本&lt;/p&gt;
&lt;p&gt;Elasticsearch: 7.6.2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/6871109774566653965&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.cn/post/6871109774566653965&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://learnku.com/articles/36224&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://learnku.com/articles/36224&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/ljhdo/p/5040252.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/ljhdo/p/5040252.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ELK" scheme="https://841809077.github.io/categories/ELK/"/>
    
    
  </entry>
  
  <entry>
    <title>Elasticsearch-7.6.2客户端查询指南</title>
    <link href="https://841809077.github.io/2022/10/12/ELK/Elasticsearch/Client/Elasticsearch-7.6.2-client-query.html"/>
    <id>https://841809077.github.io/2022/10/12/ELK/Elasticsearch/Client/Elasticsearch-7.6.2-client-query.html</id>
    <published>2022-10-12T02:17:28.000Z</published>
    <updated>2023-03-13T02:34:59.786Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>以下为 Elasticsearch 5.5.16 -&gt; 7.6.2 的 client 查询相关的改动：</p><a id="more"></a><p><img src="https://gcore.jsdelivr.net/gh/841809077/blog-img/202208/20221012135236.png" alt>在 es 5.6.16 版本，用的还是 TransportClient，用 SearchRequestBuilder 对象来构建查询条件。</p><p>而在 es 7.6.2 版本，TransportClient 已标记废弃，使用 RestHighLevelClient，配合 SearchSourceBuilder 与 SearchRequest 对象来构建查询条件。</p><p>另外在 es 7.6.2 版本，type 默认禁止使用。创建索引及索引模板时，不需要指定type（指定会报错）。当写客户端查询代码时，也不需要指定type。</p><hr><p>Elasticsearch Client 连接官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "15743-1570943068343-906",        "name": "大数据实战演练",        "qrcode": "https://gcore.jsdelivr.net/gh/841809077/blog-img/20181110/20181118235726.jpg",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下为 Elasticsearch 5.5.16 -&amp;gt; 7.6.2 的 client 查询相关的改动：&lt;/p&gt;
    
    </summary>
    
      <category term="ELK" scheme="https://841809077.github.io/categories/ELK/"/>
    
    
  </entry>
  
  <entry>
    <title>Prometheus常用查询函数梳理</title>
    <link href="https://841809077.github.io/2022/10/11/Prometheus/prometheus-query-functions.html"/>
    <id>https://841809077.github.io/2022/10/11/Prometheus/prometheus-query-functions.html</id>
    <published>2022-10-11T03:05:23.000Z</published>
    <updated>2023-07-26T09:58:31.210Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>Prometheus 提供了其它大量的查询函数，可以对时序数据进行丰富的处理。对应的官方地址：<a href="https://prometheus.io/docs/prometheus/latest/querying/functions/。以下内容是我列举的常用函数及示例：" target="_blank" rel="noopener">https://prometheus.io/docs/prometheus/latest/querying/functions/。以下内容是我列举的常用函数及示例：</a></p><a id="more"></a><h4 id="abs"><a href="#abs" class="headerlink" title="abs()"></a>abs()</h4><p>绝对值。</p><h4 id="absent"><a href="#absent" class="headerlink" title="absent"></a>absent</h4><p>如果传参的查询无结果，则输出为1；否则输出为No data。当监控度量指标时，如果获取到的样本数据是空的， 使用 absent 方法对告警是非常有用的。</p><h3 id="四舍五入"><a href="#四舍五入" class="headerlink" title="四舍五入"></a>四舍五入</h3><h4 id="ceil"><a href="#ceil" class="headerlink" title="ceil()"></a>ceil()</h4><p>将返回结果向上取整。</p><p>2.79 -&gt; 3</p><h4 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h4><p>与 ceil() 相反，将返回结果向下取整。</p><p>2.79 -&gt; 2</p><h4 id="round"><a href="#round" class="headerlink" title="round()"></a>round()</h4><p>四舍五入。默认取整，第二个参数当为1时，则取整；当为0.001时，则四舍五入保留3位小数。</p><p>如果处理的值不满足保留的小数位的话，不会补0。</p><p>如果保留的小数过多，比如0.00001，有时会返回：0.06856000000000001。如果保留的小数过多，建议还是程序处理。</p><h3 id="label标签处理"><a href="#label标签处理" class="headerlink" title="label标签处理"></a>label标签处理</h3><h4 id="label-join"><a href="#label-join" class="headerlink" title="label_join()"></a>label_join()</h4><h4 id="label-replace"><a href="#label-replace" class="headerlink" title="label_replace()"></a>label_replace()</h4><h3 id="数值上下限"><a href="#数值上下限" class="headerlink" title="数值上下限"></a>数值上下限</h3><p>使用 clamp_min() 和 clamp_max() 相当于给数据设置了上下限。</p><h4 id="clamp-min"><a href="#clamp-min" class="headerlink" title="clamp_min()"></a>clamp_min()</h4><p>输入一个瞬时向量和最小值，样本数据值若小于 min，则改为 min，否则不变。</p><p>这个可以用于：Pod CPU使用</p><h4 id="clamp-max"><a href="#clamp-max" class="headerlink" title="clamp_max()"></a>clamp_max()</h4><p>输入一个瞬时向量和最大值，样本数据值若大于 max，则改为 max，否则不变。</p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p>正序排序</p><h4 id="sort-desc"><a href="#sort-desc" class="headerlink" title="sort_desc()"></a>sort_desc()</h4><p>倒序排序</p><h4 id="topk-n-xxx"><a href="#topk-n-xxx" class="headerlink" title="topk(n, xxx)"></a>topk(n, xxx)</h4><p>排序并取前n条数据。</p><h4 id="bottomk-n-xxx"><a href="#bottomk-n-xxx" class="headerlink" title="bottomk(n, xxx)"></a>bottomk(n, xxx)</h4><p>排序并取后n条数据。</p><h3 id="增长"><a href="#增长" class="headerlink" title="增长"></a>增长</h3><p>increase、rate、irate 都适用于counter数据类型的函数，反应了某时间区间的增长或平均值。</p><h4 id="increase"><a href="#increase" class="headerlink" title="increase()"></a>increase()</h4><p>获取区间向量中的第一个和最后一个样本并返回其增长量。</p><p><code>1 - avg(increase(node_cpu_seconds_total{mode=&quot;idle&quot;,job=&quot;node-exporter&quot;,Hostname=&quot;master-1&quot;}[3m]))by(InternalIP,Hostname)/180</code></p><h4 id="rate"><a href="#rate" class="headerlink" title="rate()"></a>rate()</h4><p>平均增长率，取指定时间范围内所有数据点，算出一组速率，然后取平均值作为结果。</p><p><code>1-avg(rate(node_cpu_seconds_total{mode=&quot;idle&quot;,job=&quot;node-exporter&quot;,Hostname=&quot;master-1&quot;}[3m]))by(InternalIP,Hostname)</code></p><h4 id="irate"><a href="#irate" class="headerlink" title="irate()"></a>irate()</h4><p>即时增长率，某段时间内最后两个数据点，除以两数据点的时间戳差值。</p><p><code>1-avg(irate(node_cpu_seconds_total{mode=&quot;idle&quot;,job=&quot;node-exporter&quot;,Hostname=&quot;master-1&quot;}[3m]))by(InternalIP,Hostname)</code></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "15743-1570943068343-906",        "name": "大数据实战演练",        "qrcode": "https://gcore.jsdelivr.net/gh/841809077/blog-img/20181110/20181118235726.jpg",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Prometheus 提供了其它大量的查询函数，可以对时序数据进行丰富的处理。对应的官方地址：&lt;a href=&quot;https://prometheus.io/docs/prometheus/latest/querying/functions/。以下内容是我列举的常用函数及示例：&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://prometheus.io/docs/prometheus/latest/querying/functions/。以下内容是我列举的常用函数及示例：&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Prometheus" scheme="https://841809077.github.io/categories/Prometheus/"/>
    
    
  </entry>
  
  <entry>
    <title>Elasticsearch-7.6.2部署并开启xpack，java客户端明文密码连接指南</title>
    <link href="https://841809077.github.io/2022/10/07/ELK/Elasticsearch/Client/Elasticsearch-7.6.2-xpack-java-client.html"/>
    <id>https://841809077.github.io/2022/10/07/ELK/Elasticsearch/Client/Elasticsearch-7.6.2-xpack-java-client.html</id>
    <published>2022-10-07T13:31:28.000Z</published>
    <updated>2022-10-12T02:15:15.977Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h3 id="一、安装部署"><a href="#一、安装部署" class="headerlink" title="一、安装部署"></a>一、安装部署</h3><p>安装Elasticsearch 7.6.2的部署文档，参考：<a href="https://cloud.tencent.com/developer/article/1804215" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1804215</a></p><p>开启xpack，参考：</p><p><a href="https://segmentfault.com/a/1190000022102940" target="_blank" rel="noopener">https://segmentfault.com/a/1190000022102940</a></p><p><a href="https://cloud.tencent.com/developer/article/1772919" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1772919</a></p><p>开启后，可执行 curl 命令测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --user elastic:xxxx -XGET 'http://es_ip:9200'</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="二、Java-客户端初始化"><a href="#二、Java-客户端初始化" class="headerlink" title="二、Java 客户端初始化"></a>二、Java 客户端初始化</h3><p><del><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/java-clients.html#java-clients" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/7.6/java-clients.html#java-clients</a></del>（不推荐使用）</p><p>明文密码认证：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.6/_basic_authentication.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.6/_basic_authentication.html</a></p><h4 id="1、明文密码认证方式"><a href="#1、明文密码认证方式" class="headerlink" title="1、明文密码认证方式"></a>1、明文密码认证方式</h4><p>pom 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>客户端初始化示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> RestHighLevelClient client = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildClient</span><span class="params">()</span> <span class="keyword">throws</span> NumberFormatException </span>&#123;</span><br><span class="line">    String hostAndPorts = <span class="string">"localhost:9200"</span>;</span><br><span class="line">    String clientSchema = <span class="string">"http"</span>;</span><br><span class="line">    String clusterUserName = <span class="string">"admin"</span>;</span><br><span class="line">    String clusterUserPwd = <span class="string">"admin"</span>;</span><br><span class="line">    String[] array = hostAndPorts.split(<span class="string">","</span>);</span><br><span class="line">    HttpHost[] httpHosts = <span class="keyword">new</span> HttpHost[array.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        String hp = array[i];</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(hp)) &#123;</span><br><span class="line">            String[] hostAndPort = hp.split(<span class="string">":"</span>);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(hostAndPort[<span class="number">0</span>]) &amp;&amp; StringUtils.isNotBlank(hostAndPort[<span class="number">1</span>])) &#123;</span><br><span class="line">                httpHosts[i] = <span class="keyword">new</span> HttpHost(<span class="keyword">new</span> HttpHost(hostAndPort[<span class="number">0</span>], Integer.parseInt(hostAndPort[<span class="number">1</span>]), clientSchema));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CredentialsProvider credentialsProvider = <span class="keyword">new</span> BasicCredentialsProvider();</span><br><span class="line">    credentialsProvider.setCredentials(AuthScope.ANY, <span class="keyword">new</span> UsernamePasswordCredentials(clusterUserName, clusterUserPwd));</span><br><span class="line">    RestClientBuilder builder = RestClient.builder(httpHosts).setHttpClientConfigCallback(<span class="keyword">new</span> RestClientBuilder.HttpClientConfigCallback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> HttpAsyncClientBuilder <span class="title">customizeHttpClient</span><span class="params">(HttpAsyncClientBuilder httpAsyncClientBuilder)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> httpAsyncClientBuilder.setDefaultCredentialsProvider(credentialsProvider);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建客户端对象 es version 7.6</span></span><br><span class="line">    client = <span class="keyword">new</span> RestHighLevelClient(builder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、证书认证方式"><a href="#2、证书认证方式" class="headerlink" title="2、证书认证方式"></a>2、证书认证方式</h4><p>证书认证：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.6/_encrypted_communication.html#_encrypted_communication" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.6/_encrypted_communication.html#_encrypted_communication</a></p><p>待研究补充。。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "15743-1570943068343-906",        "name": "大数据实战演练",        "qrcode": "https://gcore.jsdelivr.net/gh/841809077/blog-img/20181110/20181118235726.jpg",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、安装部署&quot;&gt;&lt;a href=&quot;#一、安装部署&quot; class=&quot;headerlink&quot; title=&quot;一、安装部署&quot;&gt;&lt;/a&gt;一、安装部署&lt;/h3&gt;&lt;p&gt;安装Elasticsearch 7.6.2的部署文档，参考：&lt;a href=&quot;https://cloud.tencent.com/developer/article/1804215&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cloud.tencent.com/developer/article/1804215&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开启xpack，参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000022102940&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://segmentfault.com/a/1190000022102940&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1772919&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cloud.tencent.com/developer/article/1772919&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开启后，可执行 curl 命令测试：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl --user elastic:xxxx -XGET &#39;http://es_ip:9200&#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="ELK" scheme="https://841809077.github.io/categories/ELK/"/>
    
    
  </entry>
  
  <entry>
    <title>RabbitMQ exporter部署</title>
    <link href="https://841809077.github.io/2022/09/30/Prometheus/Exporter/rabbitmq-exporter.html"/>
    <id>https://841809077.github.io/2022/09/30/Prometheus/Exporter/rabbitmq-exporter.html</id>
    <published>2022-09-30T00:07:53.000Z</published>
    <updated>2023-02-15T02:48:00.881Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h3 id="一、RabbitMQ-Exporter部署"><a href="#一、RabbitMQ-Exporter部署" class="headerlink" title="一、RabbitMQ Exporter部署"></a>一、RabbitMQ Exporter部署</h3><h4 id="1、rabbitmq创建用户"><a href="#1、rabbitmq创建用户" class="headerlink" title="1、rabbitmq创建用户"></a>1、rabbitmq创建用户</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建ops_monitor用户，并设置密码</span></span><br><span class="line">rabbitmqctl add_user ops_monitor ops123</span><br><span class="line"><span class="meta">#</span><span class="bash"> 给ops_monitor用户打上monitoring角色</span></span><br><span class="line">rabbitmqctl set_user_tags ops_monitor monitoring</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建名为ops的virtual host</span></span><br><span class="line">rabbitmqctl add_vhost ops</span><br><span class="line"><span class="meta">#</span><span class="bash"> 为ops_monitor用户配置名称<span class="string">"ops"</span>的virtual host的所有权限</span></span><br><span class="line">rabbitmqctl set_permissions -p ops ops_monitor ".*" ".*" ".*"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 为ops_monitor用户配置名称<span class="string">"/"</span>的virtual host的只读权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rabbitmqctl [-n &lt;node&gt;] [-l] [-q] set_permissions [-p &lt;vhost&gt;] &lt;username&gt; &lt;conf&gt; &lt;write&gt; &lt;<span class="built_in">read</span>&gt;</span></span><br><span class="line">rabbitmqctl set_permissions -p / ops_monitor "" "" ".*"</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="2、部署rabbitmq-exporter"><a href="#2、部署rabbitmq-exporter" class="headerlink" title="2、部署rabbitmq_exporter"></a>2、部署rabbitmq_exporter</h4><p>将 rabbitmq_exporter-1.0.0-RC19_linux_amd64.tar.gz 拷贝到每个 RabbitMQ 节点上的 /opt 目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">tar zxvf rabbitmq_exporter-1.0.0-RC19_linux_amd64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果第一步创建ops_monitor用户的密码是自定义的，则需要修改./rabbitmq_exporter-1.0.0-RC19_linux_amd64/config.json的rabbit_pass配置。</span></span><br></pre></td></tr></table></figure><h4 id="3、创建exporter的service启动文件"><a href="#3、创建exporter的service启动文件" class="headerlink" title="3、创建exporter的service启动文件"></a>3、创建exporter的service启动文件</h4><p>每个 RabbitMQ 节点上都需要执行以下操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/systemd/system</span><br><span class="line">cat &lt;&lt; EOF &gt; rabbitmq_exporter.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=rabbitmq_exporter</span><br><span class="line">After=local-fs.target network-online.target network.target</span><br><span class="line">Wants=local-fs.target network-online.target network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/opt/rabbitmq_exporter-1.0.0-RC19_linux_amd64/rabbitmq_exporter -config-file /opt/rabbitmq_exporter-1.0.0-RC19_linux_amd64/config.json</span><br><span class="line">RestartSec=10</span><br><span class="line">Restart=always</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>config.json内容：</p><p>注意：rabbit_user、rabbit_pass、skip_vhost、aliveness_vhost配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"rabbit_url"</span>: <span class="string">"http://localhost:15672"</span>,</span><br><span class="line">    <span class="attr">"rabbit_user"</span>: <span class="string">"ops_monitor"</span>,</span><br><span class="line">    <span class="attr">"rabbit_pass"</span>: <span class="string">"ops123"</span>,</span><br><span class="line">    <span class="attr">"publish_port"</span>: <span class="string">"9419"</span>,</span><br><span class="line">    <span class="attr">"publish_addr"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"output_format"</span>: <span class="string">"TTY"</span>,</span><br><span class="line">    <span class="attr">"ca_file"</span>: <span class="string">"ca.pem"</span>,</span><br><span class="line">    <span class="attr">"cert_file"</span>: <span class="string">"client-cert.pem"</span>,</span><br><span class="line">    <span class="attr">"key_file"</span>: <span class="string">"client-key.pem"</span>,</span><br><span class="line">    <span class="attr">"insecure_skip_verify"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"exlude_metrics"</span>: [],</span><br><span class="line">    <span class="attr">"include_exchanges"</span>: <span class="string">".*"</span>,</span><br><span class="line">    <span class="attr">"skip_exchanges"</span>: <span class="string">"^$"</span>,</span><br><span class="line">    <span class="attr">"include_queues"</span>: <span class="string">".*"</span>,</span><br><span class="line">    <span class="attr">"skip_queues"</span>: <span class="string">"^$"</span>,</span><br><span class="line">    <span class="attr">"skip_vhost"</span>: <span class="string">"^ops$"</span>,</span><br><span class="line">    <span class="attr">"include_vhost"</span>: <span class="string">".*"</span>,</span><br><span class="line">    <span class="attr">"rabbit_capabilities"</span>: <span class="string">"no_sort,bert"</span>,</span><br><span class="line">    <span class="attr">"aliveness_vhost"</span>: <span class="string">"ops"</span>,</span><br><span class="line">    <span class="attr">"enabled_exporters"</span>: [</span><br><span class="line">            <span class="string">"exchange"</span>,</span><br><span class="line">            <span class="string">"node"</span>,</span><br><span class="line">            <span class="string">"overview"</span>,</span><br><span class="line">            <span class="string">"queue"</span>,</span><br><span class="line">            <span class="string">"aliveness"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"timeout"</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">"max_queues"</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动rabbitmq_exporter：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start rabbitmq_exporter</span><br></pre></td></tr></table></figure><p>查看运行状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status rabbitmq_exporter</span><br></pre></td></tr></table></figure><p>设置开机自启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable rabbitmq_exporter</span><br></pre></td></tr></table></figure><h4 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h4><p>执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET http://localhost:9419/metrics | grep rabbitmq_up</span><br></pre></td></tr></table></figure><p>如果 rabbitmq_up 的值为1，则证明指标采集成功。</p><p>可以登录 RabbitMQ 控制台，选择某个队列，点击进入详情，然后就可以发送消息到该队列了。</p><h3 id="二、补充RabbitMQ相关命令"><a href="#二、补充RabbitMQ相关命令" class="headerlink" title="二、补充RabbitMQ相关命令"></a>二、补充RabbitMQ相关命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看用户列表，及对应的tag（administrator、monitoring、policymaker、management、none）</span></span><br><span class="line">rabbitmqctl list_users</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看vhost列表</span></span><br><span class="line">rabbitmqctl list_vhosts</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看某用户的权限</span></span><br><span class="line">rabbitmqctl list_user_permissions &#123;用户&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 给用户admin设置vhost的操作权限；<span class="string">"/"</span>为vhost的名字</span></span><br><span class="line">rabbitmqctl set_permissions -p / admin ".*" ".*" ".*"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看某vhost下的队列；<span class="string">"/"</span>为vhost的名字</span></span><br><span class="line">rabbitmqctl list_queues -p "/"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 集群状态</span></span><br><span class="line">rabbitmqctl cluster_status</span><br></pre></td></tr></table></figure><p>RabbitMQ是多租户系统,不同的virtual host是相互独立的。</p><p>rabbitmq的权限控制通过两层来实现，一是vhost的权限，二是确认有权限访问vhost后，对vhost内资源的权限控制（配置，读，写）。</p><p>通俗的可以理解为：指用户对exchange，queue的操作权限，包括配置权限，读写权限。配置权限会影响到exchange，queue的声明和删除。读写权限影响到从queue里取消息，向exchange发送消息以及queue和exchange的绑定(bind)操作等等</p><p>授权分三个操作：</p><ul><li>读：有关消费消息的任何操作,包括”清除”整个队列</li><li>写：发布消息</li><li>配置：队列和交换机的创建和删除</li></ul><blockquote><p>参考资料：</p></blockquote><ul><li><a href="https://www.rabbitmq.com/which-erlang.html" target="_blank" rel="noopener">https://www.rabbitmq.com/which-erlang.html</a></li><li><a href="https://blog.csdn.net/Anumbrella/article/details/83513844" target="_blank" rel="noopener">https://blog.csdn.net/Anumbrella/article/details/83513844</a></li><li><a href="https://www.cnblogs.com/funcquery/p/8275126.html" target="_blank" rel="noopener">https://www.cnblogs.com/funcquery/p/8275126.html</a></li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "15743-1570943068343-906",        "name": "大数据实战演练",        "qrcode": "https://gcore.jsdelivr.net/gh/841809077/blog-img/20181110/20181118235726.jpg",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、RabbitMQ-Exporter部署&quot;&gt;&lt;a href=&quot;#一、RabbitMQ-Exporter部署&quot; class=&quot;headerlink&quot; title=&quot;一、RabbitMQ Exporter部署&quot;&gt;&lt;/a&gt;一、RabbitMQ Exporter部署&lt;/h3&gt;&lt;h4 id=&quot;1、rabbitmq创建用户&quot;&gt;&lt;a href=&quot;#1、rabbitmq创建用户&quot; class=&quot;headerlink&quot; title=&quot;1、rabbitmq创建用户&quot;&gt;&lt;/a&gt;1、rabbitmq创建用户&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 创建ops_monitor用户，并设置密码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rabbitmqctl add_user ops_monitor ops123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 给ops_monitor用户打上monitoring角色&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rabbitmqctl set_user_tags ops_monitor monitoring&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 创建名为ops的virtual host&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rabbitmqctl add_vhost ops&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 为ops_monitor用户配置名称&lt;span class=&quot;string&quot;&gt;&quot;ops&quot;&lt;/span&gt;的virtual host的所有权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rabbitmqctl set_permissions -p ops ops_monitor &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 为ops_monitor用户配置名称&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;的virtual host的只读权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; rabbitmqctl [-n &amp;lt;node&amp;gt;] [-l] [-q] set_permissions [-p &amp;lt;vhost&amp;gt;] &amp;lt;username&amp;gt; &amp;lt;conf&amp;gt; &amp;lt;write&amp;gt; &amp;lt;&lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rabbitmqctl set_permissions -p / ops_monitor &quot;&quot; &quot;&quot; &quot;.*&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Prometheus" scheme="https://841809077.github.io/categories/Prometheus/"/>
    
    
  </entry>
  
  <entry>
    <title>golang 时间相关操作集合</title>
    <link href="https://841809077.github.io/2022/09/20/GoLang/go-time-usage.html"/>
    <id>https://841809077.github.io/2022/09/20/GoLang/go-time-usage.html</id>
    <published>2022-09-20T05:31:19.000Z</published>
    <updated>2022-11-17T02:10:31.027Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h4 id="1、time按照格式转化"><a href="#1、time按照格式转化" class="headerlink" title="1、time按照格式转化"></a>1、time按照格式转化</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timeString := timeNow.Format(<span class="string">"2006-01-02 15:04:05"</span>) <span class="comment">//2015-06-15 08:52:32</span></span><br></pre></td></tr></table></figure><h4 id="2、时间戳转time"><a href="#2、时间戳转time" class="headerlink" title="2、时间戳转time"></a>2、时间戳转time</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timeNow := time.Unix(timestamp, <span class="number">0</span>) <span class="comment">//2017-08-30 16:19:19 +0800 CST</span></span><br></pre></td></tr></table></figure><h4 id="3、字符串转时间"><a href="#3、字符串转时间" class="headerlink" title="3、字符串转时间"></a>3、字符串转时间</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d, _ := time.Parse("2006-01-02 15:04:05", dateStr)</span><br></pre></td></tr></table></figure><p>更多用法可参考：<a href="https://cloud.tencent.com/developer/article/1456484?from=10910" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1456484?from=10910</a></p><a id="more"></a></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "15743-1570943068343-906",        "name": "大数据实战演练",        "qrcode": "https://gcore.jsdelivr.net/gh/841809077/blog-img/20181110/20181118235726.jpg",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1、time按照格式转化&quot;&gt;&lt;a href=&quot;#1、time按照格式转化&quot; class=&quot;headerlink&quot; title=&quot;1、time按照格式转化&quot;&gt;&lt;/a&gt;1、time按照格式转化&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;timeString := timeNow.Format(&lt;span class=&quot;string&quot;&gt;&quot;2006-01-02 15:04:05&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//2015-06-15 08:52:32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2、时间戳转time&quot;&gt;&lt;a href=&quot;#2、时间戳转time&quot; class=&quot;headerlink&quot; title=&quot;2、时间戳转time&quot;&gt;&lt;/a&gt;2、时间戳转time&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;timeNow := time.Unix(timestamp, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//2017-08-30 16:19:19 +0800 CST&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3、字符串转时间&quot;&gt;&lt;a href=&quot;#3、字符串转时间&quot; class=&quot;headerlink&quot; title=&quot;3、字符串转时间&quot;&gt;&lt;/a&gt;3、字符串转时间&lt;/h4&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;d, _ := time.Parse(&quot;2006-01-02 15:04:05&quot;, dateStr)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更多用法可参考：&lt;a href=&quot;https://cloud.tencent.com/developer/article/1456484?from=10910&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cloud.tencent.com/developer/article/1456484?from=10910&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="GoLang" scheme="https://841809077.github.io/categories/GoLang/"/>
    
    
  </entry>
  
  <entry>
    <title>如何查看HDP各组件版本信息，两种办法</title>
    <link href="https://841809077.github.io/2022/08/12/Ambari/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/hdp-copmonment-version.html"/>
    <id>https://841809077.github.io/2022/08/12/Ambari/运维相关/hdp-copmonment-version.html</id>
    <published>2022-08-12T14:35:58.000Z</published>
    <updated>2022-11-17T03:38:50.942Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><blockquote><p>前言</p></blockquote><p>大家好，我是 create17。自从 2017 年就开始围绕 Ambari 做相关工作。期间做过 Ambari 安装部署、页面生产级别的汉化、Ambari 自定义服务集成、前端页面开发、后端 API 接口开发、Ambari Server HA、部分原生 bug 修改，以及 HDP 相关常用组件的基本使用。</p><p>在大家选择使用 hdp 使用之前，肯定要关注 hdp 各组件的版本信息。那么如何查询呢？本篇文章来告诉你答案。</p><h3 id="一、方法一：从官网查看"><a href="#一、方法一：从官网查看" class="headerlink" title="一、方法一：从官网查看"></a>一、方法一：从官网查看</h3><p>打开 cloudera 官网，跳转到文档地址，如下图所示：</p><a id="more"></a><p><img src="https://gcore.jsdelivr.net/gh/841809077/blog-img/202207/20220813105328.png" alt></p><p>搜索 hdp 关键词：</p><p><img src="https://gcore.jsdelivr.net/gh/841809077/blog-img/202207/20220813110448.png" alt></p><p><img src="https://gcore.jsdelivr.net/gh/841809077/blog-img/202207/20220813110531.png" alt></p><p><img src="https://gcore.jsdelivr.net/gh/841809077/blog-img/202207/20220813110656.png" alt></p><p><img src="https://gcore.jsdelivr.net/gh/841809077/blog-img/202207/20220813110754.png" alt></p><h3 id="二、方法二：从已安装的-Ambari-页面查看"><a href="#二、方法二：从已安装的-Ambari-页面查看" class="headerlink" title="二、方法二：从已安装的 Ambari 页面查看"></a>二、方法二：从已安装的 Ambari 页面查看</h3><p>登录 Ambari 系统页面，右上角点击 “登录名”，下拉列表选择 “Manage Ambari”，如下图所示：</p><p><img src="https://gcore.jsdelivr.net/gh/841809077/blog-img/202207/20220813111235.png" alt></p><p>点击 “Version” 菜单，点击 “HDP-3.1”：</p><p><img src="https://gcore.jsdelivr.net/gh/841809077/blog-img/202207/20220813111530.png" alt></p><p><img src="https://gcore.jsdelivr.net/gh/841809077/blog-img/202207/20220813111717.png" alt></p><h3 id="三、Ambari-实战课程介绍"><a href="#三、Ambari-实战课程介绍" class="headerlink" title="三、Ambari 实战课程介绍"></a>三、Ambari 实战课程介绍</h3><p>关于 Ambari，博主写了很多博客，免费的，付费的，帮助过很多人。现在隆重推出两门 Ambari 实战教程，包答疑，请看详细介绍：</p><p>1、<strong>Ambari 自定义服务集成实战教学十八讲（完结）</strong>：<a href="https://www.yuque.com/create17/mxswdh/miyk6c" target="_blank" rel="noopener">https://www.yuque.com/create17/mxswdh/miyk6c</a></p><p>2、<strong>Ambari 源码二次开发实战课程（持续更新中）</strong>：<a href="https://www.yuque.com/create17/mxswdh/xpoa10" target="_blank" rel="noopener">https://www.yuque.com/create17/mxswdh/xpoa10</a></p><p>关于课程报名，咨询，可微信联系导师：create17_ 沟通，谢谢。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "15743-1570943068343-906",        "name": "大数据实战演练",        "qrcode": "https://gcore.jsdelivr.net/gh/841809077/blog-img/20181110/20181118235726.jpg",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大家好，我是 create17。自从 2017 年就开始围绕 Ambari 做相关工作。期间做过 Ambari 安装部署、页面生产级别的汉化、Ambari 自定义服务集成、前端页面开发、后端 API 接口开发、Ambari Server HA、部分原生 bug 修改，以及 HDP 相关常用组件的基本使用。&lt;/p&gt;
&lt;p&gt;在大家选择使用 hdp 使用之前，肯定要关注 hdp 各组件的版本信息。那么如何查询呢？本篇文章来告诉你答案。&lt;/p&gt;
&lt;h3 id=&quot;一、方法一：从官网查看&quot;&gt;&lt;a href=&quot;#一、方法一：从官网查看&quot; class=&quot;headerlink&quot; title=&quot;一、方法一：从官网查看&quot;&gt;&lt;/a&gt;一、方法一：从官网查看&lt;/h3&gt;&lt;p&gt;打开 cloudera 官网，跳转到文档地址，如下图所示：&lt;/p&gt;
    
    </summary>
    
      <category term="Ambari" scheme="https://841809077.github.io/categories/Ambari/"/>
    
    
  </entry>
  
  <entry>
    <title>docker 常见问题解答汇总</title>
    <link href="https://841809077.github.io/2022/07/28/Docker/docker-faq.html"/>
    <id>https://841809077.github.io/2022/07/28/Docker/docker-faq.html</id>
    <published>2022-07-28T02:50:56.000Z</published>
    <updated>2022-07-28T02:57:28.369Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h4 id="一、docker-push-提示：x509-certificate-signed-by-unknown-authority"><a href="#一、docker-push-提示：x509-certificate-signed-by-unknown-authority" class="headerlink" title="一、docker push 提示：x509: certificate signed by unknown authority"></a>一、docker push 提示：x509: certificate signed by unknown authority</h4><p>1、打开daemon.json，在insecure-registries里面添加你的私库地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">   "registry-mirrors":["https://xxx.aliyuncs.com"],  #镜像加速地址</span><br><span class="line">   "log-driver": "json-file",</span><br><span class="line">    "log-opts": &#123;</span><br><span class="line">    "max-size": "100m",</span><br><span class="line">    "max-file": "3"</span><br><span class="line">    &#125;,</span><br><span class="line">    "max-concurrent-downloads": 10,</span><br><span class="line">    "max-concurrent-uploads": 10,</span><br><span class="line">    "data-root": "/var/lib/docker",</span><br><span class="line">    "storage-driver": "overlay2",</span><br><span class="line">    "storage-opts": [</span><br><span class="line">      "overlay2.override_kernel_check=true"</span><br><span class="line">    ],</span><br><span class="line">    "insecure-registries":["192.168.2.xxx:443"]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span> 部分参数（registry-mirrors、insecure-registries ...）修改，只要reconfigure(systemctl reload docker) 就生效。insecure-registries 修改需要重启docker。</span><br></pre></td></tr></table></figure><p>2、重启Docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>这样就可以了。先docker login，然后再docker push。</p><a id="more"></a></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "15743-1570943068343-906",        "name": "大数据实战演练",        "qrcode": "https://gcore.jsdelivr.net/gh/841809077/blog-img/20181110/20181118235726.jpg",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、docker-push-提示：x509-certificate-signed-by-unknown-authority&quot;&gt;&lt;a href=&quot;#一、docker-push-提示：x509-certificate-signed-by-unknown-authority&quot; class=&quot;headerlink&quot; title=&quot;一、docker push 提示：x509: certificate signed by unknown authority&quot;&gt;&lt;/a&gt;一、docker push 提示：x509: certificate signed by unknown authority&lt;/h4&gt;&lt;p&gt;1、打开daemon.json，在insecure-registries里面添加你的私库地址&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vim /etc/docker/daemon.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &quot;registry-mirrors&quot;:[&quot;https://xxx.aliyuncs.com&quot;],  #镜像加速地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &quot;log-driver&quot;: &quot;json-file&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;log-opts&quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;max-size&quot;: &quot;100m&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;max-file&quot;: &quot;3&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;max-concurrent-downloads&quot;: 10,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;max-concurrent-uploads&quot;: 10,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;data-root&quot;: &quot;/var/lib/docker&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;storage-driver&quot;: &quot;overlay2&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;storage-opts&quot;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &quot;overlay2.override_kernel_check=true&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;insecure-registries&quot;:[&quot;192.168.2.xxx:443&quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt; 部分参数（registry-mirrors、insecure-registries ...）修改，只要reconfigure(systemctl reload docker) 就生效。insecure-registries 修改需要重启docker。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2、重启Docker&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;systemctl restart docker&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样就可以了。先docker login，然后再docker push。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://841809077.github.io/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>k8s 污点和容忍讲解</title>
    <link href="https://841809077.github.io/2022/07/13/K8s/taint-and-toleration.html"/>
    <id>https://841809077.github.io/2022/07/13/K8s/taint-and-toleration.html</id>
    <published>2022-07-12T19:11:41.000Z</published>
    <updated>2022-07-12T09:11:27.801Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>k8s 污点和容忍：</p><p><a href="https://jimmysong.io/kubernetes-handbook/concepts/taint-and-toleration.html" target="_blank" rel="noopener">https://jimmysong.io/kubernetes-handbook/concepts/taint-and-toleration.html</a></p><a id="more"></a></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "15743-1570943068343-906",        "name": "大数据实战演练",        "qrcode": "https://gcore.jsdelivr.net/gh/841809077/blog-img/20181110/20181118235726.jpg",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;k8s 污点和容忍：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jimmysong.io/kubernetes-handbook/concepts/taint-and-toleration.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://jimmysong.io/kubernetes-handbook/concepts/taint-and-toleration.html&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="K8s" scheme="https://841809077.github.io/categories/K8s/"/>
    
    
  </entry>
  
  <entry>
    <title>HDFS 使用报告参数说明</title>
    <link href="https://841809077.github.io/2022/06/13/HDFS/dfsadmin-report-introduce.html"/>
    <id>https://841809077.github.io/2022/06/13/HDFS/dfsadmin-report-introduce.html</id>
    <published>2022-06-13T09:32:31.000Z</published>
    <updated>2022-11-17T03:38:50.869Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[hdfs@cdh-worker1 ~]$ hdfs dfsadmin -report</span><br><span class="line">Configured Capacity: 601516597248 (560.21 GB)</span><br><span class="line">Present Capacity: 565009399351 (526.21 GB)</span><br><span class="line">DFS Remaining: 469261164350 (437.03 GB)</span><br><span class="line">DFS Used: 95748235001 (89.17 GB)</span><br><span class="line">DFS Used%: 16.95%</span><br><span class="line">Under replicated blocks: 0</span><br><span class="line">Blocks with corrupt replicas: 0</span><br><span class="line">Missing blocks: 0</span><br><span class="line">Missing blocks (with replication factor 1): 0</span><br><span class="line"></span><br><span class="line">-------------------------------------------------</span><br><span class="line">Live datanodes (3):</span><br><span class="line"></span><br><span class="line">Name: 192.168.2.220:50010 (cdh-worker1)</span><br><span class="line">Hostname: cdh-worker1</span><br><span class="line">Rack: /default</span><br><span class="line">Decommission Status : Normal</span><br><span class="line">Configured Capacity: 200505532416 (186.74 GB)</span><br><span class="line">DFS Used: 31916771923 (29.72 GB)</span><br><span class="line">Non DFS Used: 2634159533 (2.45 GB)</span><br><span class="line">DFS Remaining: 154663588172 (144.04 GB)</span><br><span class="line">DFS Used%: 15.92%</span><br><span class="line">DFS Remaining%: 77.14%</span><br><span class="line">Configured Cache Capacity: 4294967296 (4 GB)</span><br><span class="line">Cache Used: 0 (0 B)</span><br><span class="line">Cache Remaining: 4294967296 (4 GB)</span><br><span class="line">Cache Used%: 0.00%</span><br><span class="line">Cache Remaining%: 100.00%</span><br><span class="line">Xceivers: 10</span><br><span class="line">Last contact: Mon Jun 13 17:04:17 CST 2022</span><br><span class="line"></span><br><span class="line">... 其他节点数据省略</span><br></pre></td></tr></table></figure><p>如上：是执行 <code>hdfs dfsadmin -report</code> 输出的部分结果。</p><p>对于 <code>Configured Capacity</code>、<code>Present Capacity</code>、<code>DFS Used</code>、<code>Non DFS Used</code>、<code>DFS Remaining</code> 概念经常混淆，今天特地抽时间研究了下，如有不对的地方，还请留言指正，谢谢。</p><a id="more"></a><ul><li>Configured Capacity（已配置容量） = dfs.datanode.data.dir(datanode 数据目录) 所在的总磁盘空间（df -h 的 size 值） - 每个磁盘的 dfs.datanode.du.reserved(适用于非 DFS 使用的保留空间) </li><li>Present Capacity（当前容量）= 所有数据节点的 [DFS Used + DFS Remaining] 之和</li><li>non DFS Used（占用了应该属于 HDFS 的多少空间）= dfs.datanode.data.dir 所在磁盘中非 hdfs 数据量 - 所在磁盘的磁盘的 dfs.datanode.du.reserved - 分区的保留空间 = Configured Capacity - DFS Remaining - DFS Used - 分区的保留空间。</li></ul><p>值得一提的是：当 dfs.datanode.du.reserved 设置的空间占满后，non DFS Used 才有值。</p><p>分区的保留空间：linux 的硬盘分区程序会自动为 root 或指定的用户保留一定的磁盘空间默认是 5％。大小计算示例：</p><p><img src="https://gcore.jsdelivr.net/gh/841809077/blog-img/202207/20220613181632.png" alt></p><p>这其实也是 <code>df -h</code> 命令，(free_space + used_space) != total_size 的原因，具体可参考：<a href="https://unix.stackexchange.com/questions/25602/why-is-free-space-used-space-total-size-in-df" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/25602/why-is-free-space-used-space-total-size-in-df</a></p><p>参考资料：</p><ul><li><a href="https://community.cloudera.com/t5/Community-Articles/Details-of-the-output-hdfs-dfsadmin-report/ta-p/245505" target="_blank" rel="noopener">https://community.cloudera.com/t5/Community-Articles/Details-of-the-output-hdfs-dfsadmin-report/ta-p/245505</a></li><li><a href="https://blog.51cto.com/xiaoxiaozhou/2139311" target="_blank" rel="noopener">https://blog.51cto.com/xiaoxiaozhou/2139311</a></li><li><a href="https://community.cloudera.com/t5/Support-Questions/HDFS-Non-DFS-used/td-p/161006" target="_blank" rel="noopener">https://community.cloudera.com/t5/Support-Questions/HDFS-Non-DFS-used/td-p/161006</a></li><li><a href="https://stackoverflow.com/questions/18477983/what-exactly-non-dfs-used-means" target="_blank" rel="noopener">https://stackoverflow.com/questions/18477983/what-exactly-non-dfs-used-means</a></li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "15743-1570943068343-906",        "name": "大数据实战演练",        "qrcode": "https://gcore.jsdelivr.net/gh/841809077/blog-img/20181110/20181118235726.jpg",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[hdfs@cdh-worker1 ~]$ hdfs dfsadmin -report&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Configured Capacity: 601516597248 (560.21 GB)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Present Capacity: 565009399351 (526.21 GB)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DFS Remaining: 469261164350 (437.03 GB)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DFS Used: 95748235001 (89.17 GB)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DFS Used%: 16.95%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Under replicated blocks: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Blocks with corrupt replicas: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Missing blocks: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Missing blocks (with replication factor 1): 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Live datanodes (3):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Name: 192.168.2.220:50010 (cdh-worker1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Hostname: cdh-worker1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Rack: /default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Decommission Status : Normal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Configured Capacity: 200505532416 (186.74 GB)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DFS Used: 31916771923 (29.72 GB)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Non DFS Used: 2634159533 (2.45 GB)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DFS Remaining: 154663588172 (144.04 GB)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DFS Used%: 15.92%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DFS Remaining%: 77.14%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Configured Cache Capacity: 4294967296 (4 GB)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cache Used: 0 (0 B)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cache Remaining: 4294967296 (4 GB)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cache Used%: 0.00%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cache Remaining%: 100.00%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Xceivers: 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Last contact: Mon Jun 13 17:04:17 CST 2022&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;... 其他节点数据省略&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上：是执行 &lt;code&gt;hdfs dfsadmin -report&lt;/code&gt; 输出的部分结果。&lt;/p&gt;
&lt;p&gt;对于 &lt;code&gt;Configured Capacity&lt;/code&gt;、&lt;code&gt;Present Capacity&lt;/code&gt;、&lt;code&gt;DFS Used&lt;/code&gt;、&lt;code&gt;Non DFS Used&lt;/code&gt;、&lt;code&gt;DFS Remaining&lt;/code&gt; 概念经常混淆，今天特地抽时间研究了下，如有不对的地方，还请留言指正，谢谢。&lt;/p&gt;
    
    </summary>
    
      <category term="HDFS" scheme="https://841809077.github.io/categories/HDFS/"/>
    
    
  </entry>
  
  <entry>
    <title>快来学习！全网最全的Ambari知识库闪亮登场</title>
    <link href="https://841809077.github.io/2022/05/28/Ambari/promotion/ambari-knowledge.html"/>
    <id>https://841809077.github.io/2022/05/28/Ambari/promotion/ambari-knowledge.html</id>
    <published>2022-05-28T08:47:12.000Z</published>
    <updated>2022-11-21T01:37:08.515Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>大家好，我是create17。自从2017年实习，我就开始围绕Ambari做相关工作。期间做过Ambari安装部署、页面生产级别的汉化、Ambari自定义服务集成、前端页面开发、后端API接口开发、Ambari Server HA、部分原生bug修改，以及HDP相关常用组件的基本使用。</p><p>关于HDP，除了常用组件的使用测试写文档，还花费了大量时间研究Kerberos，少量时间研究Knox。</p><p>Ambari自定义服务集成，在Ambari 2.6.x 和 2.7.x 版本也集成过很多组件，比如：Elasticsearch、HUE、Kylin、PostgreSQL + PostGIS、Kerberos KDC Server、JanusGraph等。如此多集成服务的经验，使我对Ambari自定义服务集成有了很深的理解，简直就是万物皆可集成。于是花费很多的精力去投入，输出了《Ambari自定义服务集成十八讲》课程，内容干货同时享有的权益有很多，具体可通过《<a href="https://www.yuque.com/create17/ambari/miyk6c" target="_blank" rel="noopener">让 Ambari 不再难学，让大家都能熟练集成自定义服务</a>》了解详情。截止2022.11月，已累计210+学员报名。</p><a id="more"></a><p>Ambari源码二次开发，同样在Ambari 2.6.x 和 2.7.x 版本做过Ambari的改造，比如：页面生产级别的汉化、根据需求对Ambari前后端进行二次开发，主要针对页面、API接口的开发，基于Ambari实现自己的业务需求。在这之中也有很多心得经验，目前正在投入时间来输出相关知识，比如：Ambari源码编译、页面如何高效率地开发汉化、Ambari Server API如何二次开发等，具体可通过《<a href="https://www.yuque.com/create17/ambari/xpoa10" target="_blank" rel="noopener">Ambari源码二次开发实战课程（持续更新中）</a>》了解详情。</p><p>Ambari虽然已经退役，我觉得不仅仅是因为社区不活跃，在Ambari更新到2.7.x版本后，无论从Web UI风格，还是功能上确实也都满足了基本需要。由于Ambari开源，且功能丰富，目前依旧有很多企业在打造自己的大数据管理平台时首选Ambari做二次开发。</p><p>在2021年以后，我能明显感觉到「Ambari」的搜索指数上升很快，相关博客也有很多了，虽然大部分都是安装部署，但种种迹象表明Ambari的热度逐年上升。</p><p>由于经常写关于Ambari方面的博客，让我在Ambari方面也有了一些名气，有很多同学都会加我好友咨询问题，在这里感到非常荣幸，同时我也不是高冷的答主，只要你态度诚恳，我都会有问必答，但也希望你会提问问题，具体可以参考我写的这篇《<a href="http://mp.weixin.qq.com/s?__biz=MzU3MTc1NzU0Mg==&amp;mid=2247491773&amp;idx=1&amp;sn=22d08e4d3fbee1409195ece65e3b76b0&amp;chksm=fcd9e634cbae6f22e424e90852e145177f6cae596bb4f4d516f9f5515808dd9130dd19fd7f40&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">工作这么久，你真的会提问问题吗？</a>》</p><p>在Ambari方面，我积累了很多文章、视频、实战课程等，帮助了很多人学会使用Ambari，二次开发Ambari。最近，我正在筹备Ambari知识库，想把我关于Ambari所有知识点都放在里面，聚焦，方便大家查阅学习。里面的每一篇文章都超级有用，简直是Ambari从业者的福音。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "15743-1570943068343-906",        "name": "大数据实战演练",        "qrcode": "https://gcore.jsdelivr.net/gh/841809077/blog-img/20181110/20181118235726.jpg",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家好，我是create17。自从2017年实习，我就开始围绕Ambari做相关工作。期间做过Ambari安装部署、页面生产级别的汉化、Ambari自定义服务集成、前端页面开发、后端API接口开发、Ambari Server HA、部分原生bug修改，以及HDP相关常用组件的基本使用。&lt;/p&gt;
&lt;p&gt;关于HDP，除了常用组件的使用测试写文档，还花费了大量时间研究Kerberos，少量时间研究Knox。&lt;/p&gt;
&lt;p&gt;Ambari自定义服务集成，在Ambari 2.6.x 和 2.7.x 版本也集成过很多组件，比如：Elasticsearch、HUE、Kylin、PostgreSQL + PostGIS、Kerberos KDC Server、JanusGraph等。如此多集成服务的经验，使我对Ambari自定义服务集成有了很深的理解，简直就是万物皆可集成。于是花费很多的精力去投入，输出了《Ambari自定义服务集成十八讲》课程，内容干货同时享有的权益有很多，具体可通过《&lt;a href=&quot;https://www.yuque.com/create17/ambari/miyk6c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;让 Ambari 不再难学，让大家都能熟练集成自定义服务&lt;/a&gt;》了解详情。截止2022.11月，已累计210+学员报名。&lt;/p&gt;
    
    </summary>
    
      <category term="Ambari" scheme="https://841809077.github.io/categories/Ambari/"/>
    
    
  </entry>
  
  <entry>
    <title>Prometheus Record介绍</title>
    <link href="https://841809077.github.io/2022/05/28/Prometheus/prometheus-operator/prometheusrule-record.html"/>
    <id>https://841809077.github.io/2022/05/28/Prometheus/prometheus-operator/prometheusrule-record.html</id>
    <published>2022-05-28T04:00:53.000Z</published>
    <updated>2022-09-09T10:44:26.116Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>待更新。</p><a id="more"></a><p><a href="https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/alert/prometheus-recoding-rules" target="_blank" rel="noopener">https://yunlzheng.gitbook.io/prometheus-book/parti-prometheus-ji-chu/alert/prometheus-recoding-rules</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PrometheusRule</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">meta.helm.sh/release-name:</span> <span class="string">kube-prometheus</span></span><br><span class="line">    <span class="string">meta.helm.sh/release-namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line">    <span class="string">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="string">app.kubernetes.io/name:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="string">app.kubernetes.io/version:</span> <span class="string">v2.22.1</span></span><br><span class="line"><span class="attr">    prometheus:</span> <span class="string">k8s</span></span><br><span class="line"><span class="attr">    release:</span> <span class="string">kube-prometheus</span></span><br><span class="line"><span class="attr">    role:</span> <span class="string">alert-rules</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">hrsn-opsdoc-rules</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  groups:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">node1.rules</span></span><br><span class="line"><span class="attr">    rules:</span></span><br><span class="line"><span class="attr">    - expr:</span> <span class="string">rate(kafka_topic_partition_current_offset[30d])</span></span><br><span class="line"><span class="attr">      record:</span> <span class="attr">kafka_topic_partition_current_offset:rate</span></span><br></pre></td></tr></table></figure><h4 id="Prometheus-Rule-或-Record-是怎么被绑定的？"><a href="#Prometheus-Rule-或-Record-是怎么被绑定的？" class="headerlink" title="Prometheus Rule 或 Record 是怎么被绑定的？"></a>Prometheus Rule 或 Record 是怎么被绑定的？</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get prometheus -n monitoring k8s -oyaml</span><br></pre></td></tr></table></figure><p>这就需要查看我们创建的 prometheus 这个资源对象了，里面有非常重要的一个属性 ruleSelector，用来匹配 rule 规则的过滤器，要求匹配具有 prometheus=k8s 和 role=alert-rules 标签的 PrometheusRule 资源对象，现在明白了吧？</p><p>参考博客：</p><ul><li><p><a href="https://www.qikqiak.com/post/prometheus-operator-custom-alert/" target="_blank" rel="noopener">https://www.qikqiak.com/post/prometheus-operator-custom-alert/</a></p></li><li><p><a href="https://help.aliyun.com/document_detail/356529.html" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/356529.html</a></p></li></ul><h4 id="prometheusRule创建后，如何在prometheus容器-etc-prometheus-rules-prometheus-k8s-rulefiles-0目录下生成yaml文件的？"><a href="#prometheusRule创建后，如何在prometheus容器-etc-prometheus-rules-prometheus-k8s-rulefiles-0目录下生成yaml文件的？" class="headerlink" title="prometheusRule创建后，如何在prometheus容器/etc/prometheus/rules/prometheus-k8s-rulefiles-0目录下生成yaml文件的？"></a>prometheusRule创建后，如何在prometheus容器/etc/prometheus/rules/prometheus-k8s-rulefiles-0目录下生成yaml文件的？</h4><p>我们创建一个 PrometheusRule 资源对象后，会自动在上面的 prometheus-k8s-rulefiles-0 目录下面生成一个对应的<code>&lt;namespace&gt;-&lt;name&gt;.yaml</code>文件。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "15743-1570943068343-906",        "name": "大数据实战演练",        "qrcode": "https://gcore.jsdelivr.net/gh/841809077/blog-img/20181110/20181118235726.jpg",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;待更新。&lt;/p&gt;
    
    </summary>
    
      <category term="Prometheus" scheme="https://841809077.github.io/categories/Prometheus/"/>
    
    
  </entry>
  
  <entry>
    <title>golang对struct数组排序并分页</title>
    <link href="https://841809077.github.io/2022/05/28/GoLang/go-slices-sort-page.html"/>
    <id>https://841809077.github.io/2022/05/28/GoLang/go-slices-sort-page.html</id>
    <published>2022-05-28T02:52:19.000Z</published>
    <updated>2022-09-20T08:30:08.119Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>可能大家一说到分页或排序，可能就会想到mysql之类的数据库分页排序了。本篇文章不讲这个，主要讲解如何对数据数组进行分页，以及排序的。这种的使用场景也是有的，所以详细记录一下。</p><h3 id="1、分片分页："><a href="#1、分片分页：" class="headerlink" title="1、分片分页："></a>1、分片分页：</h3><a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @Description: 分片分页</span></span><br><span class="line"><span class="comment">// param page 页码</span></span><br><span class="line"><span class="comment">// param pageSize 每页条数</span></span><br><span class="line"><span class="comment">// param servicePlatformVOList</span></span><br><span class="line"><span class="comment">// @return pm</span></span><br><span class="line"><span class="comment">// @return err</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SlicePage</span><span class="params">(page, pageSize, nums <span class="keyword">int</span>)</span> <span class="params">(sliceStart <span class="keyword">int</span>, sliceEnd <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// 定义page和size的默认值</span></span><br><span class="line"><span class="keyword">if</span> page &lt;= <span class="number">0</span> &#123;</span><br><span class="line">page = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> pageSize &lt;= <span class="number">0</span> &#123;</span><br><span class="line">pageSize = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果pageSize大于num（切片长度）, 那么sliceEnd直接返回num的值</span></span><br><span class="line"><span class="keyword">if</span> pageSize &gt; nums &#123;</span><br><span class="line">sliceStart = <span class="number">0</span></span><br><span class="line">sliceEnd = nums</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 总页数计算，math.Ceil 返回不小于计算值的最小整数（的浮点值）</span></span><br><span class="line">pageCount := <span class="keyword">int</span>(math.Ceil(<span class="keyword">float64</span>(nums) / <span class="keyword">float64</span>(pageSize)))</span><br><span class="line"><span class="keyword">if</span> page &gt; pageCount &#123;</span><br><span class="line">sliceStart = <span class="number">0</span></span><br><span class="line">sliceEnd = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">sliceStart = (page - <span class="number">1</span>) * pageSize</span><br><span class="line">sliceEnd = sliceStart + pageSize</span><br><span class="line"><span class="keyword">if</span> sliceStart &gt; nums &#123;</span><br><span class="line">sliceStart = nums</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果页总数比sliceEnd小，那么就把总数赋值给sliceEnd</span></span><br><span class="line"><span class="keyword">if</span> sliceEnd &gt; nums &#123;</span><br><span class="line">sliceEnd = nums</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sliceStart, sliceEnd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体使用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sliceStart, sliceEnd := SlicePage(pageModel.Page, pageModel.Size, total)</span><br><span class="line">pageModel.Data = platformPodMetricsVOs[sliceStart:sliceEnd]</span><br></pre></td></tr></table></figure><h3 id="2、struct数组排序"><a href="#2、struct数组排序" class="headerlink" title="2、struct数组排序"></a>2、struct数组排序</h3><p><a href="https://blog.csdn.net/raoxiaoya/article/details/115333536" target="_blank" rel="noopener">https://blog.csdn.net/raoxiaoya/article/details/115333536</a></p><p>实现方法后，如何支持动态排序呢？</p><p>我的想法是，在struct里面增加sortStr字段，对外不显示。实现方法中，根据该字段进行多个字段排序的实现。</p><p>例如：sortStr=cpudesc,memdesc</p><p>根据sortStr字段的值，以逗号做切分，按照顺序依次排序。</p><hr><p>另一种想法，使用<code>sort.SliceStable</code>：</p><p>参考：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sort.SliceStable(family, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> family[i].Age != family[j].Age &#123;</span><br><span class="line">        <span class="keyword">return</span> family[i].Age &lt; family[j].Age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strings.Compare(family[i].Name, family[j].Name) == <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">————————————————</span><br><span class="line">原文作者：KevinYan</span><br><span class="line">转自链接：https:<span class="comment">//learnku.com/articles/38269</span></span><br><span class="line">版权声明：著作权归作者所有。商业转载请联系作者获得授权，非商业转载请保留以上作者信息和原文链接。</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "15743-1570943068343-906",        "name": "大数据实战演练",        "qrcode": "https://gcore.jsdelivr.net/gh/841809077/blog-img/20181110/20181118235726.jpg",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;可能大家一说到分页或排序，可能就会想到mysql之类的数据库分页排序了。本篇文章不讲这个，主要讲解如何对数据数组进行分页，以及排序的。这种的使用场景也是有的，所以详细记录一下。&lt;/p&gt;
&lt;h3 id=&quot;1、分片分页：&quot;&gt;&lt;a href=&quot;#1、分片分页：&quot; class=&quot;headerlink&quot; title=&quot;1、分片分页：&quot;&gt;&lt;/a&gt;1、分片分页：&lt;/h3&gt;
    
    </summary>
    
      <category term="GoLang" scheme="https://841809077.github.io/categories/GoLang/"/>
    
    
  </entry>
  
  <entry>
    <title>golang调用k8s clientset获取pod相关指标</title>
    <link href="https://841809077.github.io/2022/05/27/K8s/pod-metrics.html"/>
    <id>https://841809077.github.io/2022/05/27/K8s/pod-metrics.html</id>
    <published>2022-05-27T02:10:07.000Z</published>
    <updated>2022-11-18T10:39:58.208Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>pod：</p><ul><li>Cpu Request: <ul><li>requests.Cpu().AsDec().String()，单位：Core</li><li>requests.Cpu().MilliValue()，单位：m</li><li><del>requests.Cpu().Value()，不准。100m时，显示1；2000m时显示2</del></li></ul></li><li>Cpu Limit:<ul><li>用法同上</li></ul></li><li>Memory Request:<ul><li>requests.Memory().AsDec().String()，单位：bytes</li><li>requests.Memory().Value()，单位：bytes</li></ul></li><li>Memory Limit:<ul><li>用法同上</li></ul></li></ul><a id="more"></a><p>pod:</p><ul><li>Cpu Usage: container.Usage.Cpu().MilliValue()，单位是：m</li><li>Memory Usage: container.Usage.Memory().Value()，单位是：bytes</li></ul><p>Node:</p><ul><li>可分配给pod使用的Cpu最大值：<ul><li>node.Status.Allocatable.Cpu().AsDec().String()，单位：Core</li><li>node.Status.Allocatable.Cpu().Value()，单位：Core, int64</li><li>node.Status.Allocatable.Cpu().MilliValue()，单位：m</li></ul></li><li>可分配给pod使用的Memory最大值：<ul><li>node.Status.Allocatable.Memory().AsDec().String()，单位：bytes</li><li>node.Status.Allocatable.Memory().Value()，单位：bytes</li></ul></li></ul></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "15743-1570943068343-906",        "name": "大数据实战演练",        "qrcode": "https://gcore.jsdelivr.net/gh/841809077/blog-img/20181110/20181118235726.jpg",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pod：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cpu Request: &lt;ul&gt;
&lt;li&gt;requests.Cpu().AsDec().String()，单位：Core&lt;/li&gt;
&lt;li&gt;requests.Cpu().MilliValue()，单位：m&lt;/li&gt;
&lt;li&gt;&lt;del&gt;requests.Cpu().Value()，不准。100m时，显示1；2000m时显示2&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cpu Limit:&lt;ul&gt;
&lt;li&gt;用法同上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Memory Request:&lt;ul&gt;
&lt;li&gt;requests.Memory().AsDec().String()，单位：bytes&lt;/li&gt;
&lt;li&gt;requests.Memory().Value()，单位：bytes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Memory Limit:&lt;ul&gt;
&lt;li&gt;用法同上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="K8s" scheme="https://841809077.github.io/categories/K8s/"/>
    
    
  </entry>
  
  <entry>
    <title>golang数据类型转换</title>
    <link href="https://841809077.github.io/2022/05/06/GoLang/data-type-conversion.html"/>
    <id>https://841809077.github.io/2022/05/06/GoLang/data-type-conversion.html</id>
    <published>2022-05-06T01:59:19.000Z</published>
    <updated>2023-01-17T03:37:48.072Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>string转float64：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line">tmp := <span class="string">""</span></span><br><span class="line">str, err := strconv.ParseFloat(tmp, <span class="number">64</span>)</span><br><span class="line">fmt.Println(str)  <span class="comment">// 0 float64类型</span></span><br><span class="line"><span class="comment">// 当tmp="asdsad"时，str会为0，但err会有错误产生</span></span><br></pre></td></tr></table></figure><p>string转bool：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value, _ := strconv.ParseBool(<span class="string">"asdasd"</span>)  <span class="comment">// 当报错时值为false</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>string转int或int64：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">strInt, _ := strconv.Atoi(<span class="string">"0"</span>)  <span class="comment">// 当报错时值为0</span></span><br><span class="line">fmt.Println(strInt)</span><br><span class="line"></span><br><span class="line">strInt64, _ := strconv.ParseInt(<span class="string">"0"</span>, <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line">fmt.Println(strInt64)</span><br></pre></td></tr></table></figure><p>int或int64转成string：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> := strconv.Itoa(<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">string</span> := strconv.FormatInt(<span class="keyword">int64</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>bool转string：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boolStr := strconv.FormatBool(true)</span><br></pre></td></tr></table></figure><p>float64转string：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line">tmp := <span class="number">0.00</span></span><br><span class="line">aa := strconv.FormatFloat(tmp, <span class="string">'f'</span>, <span class="number">2</span>, <span class="number">64</span>)  <span class="comment">// 0.00 string类型，保留两位小数</span></span><br><span class="line">fmt.Println(aa)</span><br></pre></td></tr></table></figure><p>float64向上、向下取整</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">x := <span class="number">1.1</span></span><br><span class="line">fmt.Println(math.Ceil(x))  <span class="comment">// 2</span></span><br><span class="line">fmt.Println(math.Floor(x))  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>float64转int，并四舍五入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">“fmt”</span><br><span class="line">“math”</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main()&#123;</span><br><span class="line">x:= 3.1415</span><br><span class="line">//四舍五入</span><br><span class="line">c:=int(math.Ceil(x-0.5))</span><br><span class="line">d:=int(math.Floor(x+0.5))</span><br><span class="line">fmt.Println(“c”,“d”,c,d)</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span> c、d结果都是3</span><br></pre></td></tr></table></figure><p>float64四舍五入 &amp;&amp; int数值计算转float，并保留两位小数（四舍五入）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> devicesTotal <span class="keyword">float64</span> = <span class="number">0.00</span></span><br><span class="line">deviceTotal:=<span class="number">524152832</span></span><br><span class="line">deviceTotalFloat64, _ := strconv.ParseFloat(fmt.Sprintf(<span class="string">"%.2f"</span>, <span class="keyword">float64</span>(deviceTotal)/<span class="number">1024</span>/<span class="number">1024</span>), <span class="number">64</span>)</span><br><span class="line">devicesTotal = devicesTotal + deviceTotalFloat64</span><br><span class="line">fmt.Println(devicesTotal)  <span class="comment">// 499.87</span></span><br></pre></td></tr></table></figure><p>string转化为struct对象：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"encoding/json"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ClusterAddDTO <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// ...省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_ = json.Unmarshal([]<span class="keyword">byte</span>(<span class="string">"...省略"</span>), &amp;clusterAddDTO)</span><br></pre></td></tr></table></figure><p>数组转字符串，用逗号分隔：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data := []string&#123;"l", "i", "c", "h", "u", "a", "c", "h", "u", "a"&#125;</span><br><span class="line">str := strings.Join(data, ",")</span><br><span class="line">fmt.Println(str)</span><br><span class="line"><span class="meta">#</span> 结果：l,i,c,h,u,a,c,h,u,a</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "15743-1570943068343-906",        "name": "大数据实战演练",        "qrcode": "https://gcore.jsdelivr.net/gh/841809077/blog-img/20181110/20181118235726.jpg",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;string转float64：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;strconv&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmp := &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;str, err := strconv.ParseFloat(tmp, &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fmt.Println(str)  &lt;span class=&quot;comment&quot;&gt;// 0 float64类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 当tmp=&quot;asdsad&quot;时，str会为0，但err会有错误产生&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;string转bool：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;value, _ := strconv.ParseBool(&lt;span class=&quot;string&quot;&gt;&quot;asdasd&quot;&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// 当报错时值为false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="GoLang" scheme="https://841809077.github.io/categories/GoLang/"/>
    
    
  </entry>
  
  <entry>
    <title>clientset操作Service、ServiceMonitor、Endpoints</title>
    <link href="https://841809077.github.io/2022/05/05/K8s/golang-client-operator/k8s-service-servicemonitor-endpoints.html"/>
    <id>https://841809077.github.io/2022/05/05/K8s/golang-client-operator/k8s-service-servicemonitor-endpoints.html</id>
    <published>2022-05-05T14:48:43.000Z</published>
    <updated>2022-05-28T03:57:48.127Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><p>删除指定的Endpoints：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> grace <span class="keyword">int64</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> clientset *kubernetes.Clientset</span><br><span class="line">clientset, err = kubernetes.NewForConfig(util.GetKubeConfig())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    util.Logger.Error(err)</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err = clientset.CoreV1().Endpoints(namespace).Delete(strings.ToLower(clusterName), &amp;metav1.DeleteOptions&#123;GracePeriodSeconds: &amp;grace&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> !apierrors.IsNotFound(err) &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>删除指定的Service：</p><a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> grace <span class="keyword">int64</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> clientset *kubernetes.Clientset</span><br><span class="line">clientset, err = kubernetes.NewForConfig(util.GetKubeConfig())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">|NH</span><br><span class="line">    util.Logger.Error(err)</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err = clientset.CoreV1().Services(namespace).Delete(strings.ToLower(clusterName), &amp;metav1.DeleteOptions&#123;GracePeriodSeconds: &amp;grace&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> !apierrors.IsNotFound(err) &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除指定的ServiceMonitor：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> grace <span class="keyword">int64</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> versionedClients *versioned.Clientset</span><br><span class="line">versionedClients, err = versioned.NewForConfig(util.GetKubeConfig())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err = versionedClients.MonitoringV1().ServiceMonitors(namespace).Delete(clusterName, &amp;metav1.DeleteOptions&#123;GracePeriodSeconds: &amp;grace&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> !apierrors.IsNotFound(err) &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "15743-1570943068343-906",        "name": "大数据实战演练",        "qrcode": "https://gcore.jsdelivr.net/gh/841809077/blog-img/20181110/20181118235726.jpg",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;删除指定的Endpoints：&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; grace &lt;span class=&quot;keyword&quot;&gt;int64&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; clientset *kubernetes.Clientset&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clientset, err = kubernetes.NewForConfig(util.GetKubeConfig())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    util.Logger.Error(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err = clientset.CoreV1().Endpoints(namespace).Delete(strings.ToLower(clusterName), &amp;amp;metav1.DeleteOptions&amp;#123;GracePeriodSeconds: &amp;amp;grace&amp;#125;); err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !apierrors.IsNotFound(err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;删除指定的Service：&lt;/p&gt;
    
    </summary>
    
      <category term="K8s" scheme="https://841809077.github.io/categories/K8s/"/>
    
    
  </entry>
  
  <entry>
    <title>jinzhu版的gorm操作汇总</title>
    <link href="https://841809077.github.io/2022/05/02/GoLang/gorm-jinzhu.html"/>
    <id>https://841809077.github.io/2022/05/02/GoLang/gorm-jinzhu.html</id>
    <published>2022-05-02T05:42:19.000Z</published>
    <updated>2022-11-04T10:14:18.385Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h4 id="1、零值字段也更新"><a href="#1、零值字段也更新" class="headerlink" title="1、零值字段也更新"></a>1、零值字段也更新</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gorm特性，当用struct更新时，里面的零值是不会被更新的，需要转换为map，这样零值也可被更新</span></span><br><span class="line">hostsMap := structs.Map(&amp;hosts)</span><br><span class="line"><span class="comment">// 更新集群相关信息，忽略对id字段的更新</span></span><br><span class="line">dbUpdate := tx.Model(&amp;hosts).Where(<span class="string">"ip = ?"</span>, hosts.Ip).Omit(<span class="string">"id"</span>).Updates(hostsMap)</span><br><span class="line"><span class="keyword">if</span> err = dbUpdate.Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> dbUpdate.RowsAffected == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> errors.New(fmt.Sprintf(<span class="string">"Node ip [%s] was not exists."</span>, ip))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="2、事务"><a href="#2、事务" class="headerlink" title="2、事务"></a>2、事务</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启事务</span></span><br><span class="line">err = util.MysqlConnetion.Transaction(<span class="function"><span class="keyword">func</span><span class="params">(tx *gorm.DB)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err = tx.Create(&amp;hosts).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(clusterList) &gt; <span class="number">0</span> &amp;&amp; isBatch &#123;</span><br><span class="line">        <span class="keyword">if</span> err = tx.Exec(buffer.String()).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> err</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重新创建kubelet的Endpoint</span></span><br><span class="line">    flagOperator := gjson.Get(util.GetConfig(), <span class="string">"monitor.enableOperator"</span>).Bool()</span><br><span class="line">    <span class="keyword">if</span> flagOperator &#123;</span><br><span class="line">        <span class="comment">// 确认要添加的节点是否为k8s节点，如果是，则更新kubelet的Endpoint</span></span><br><span class="line">        <span class="keyword">if</span> _, ok := nodeIp[ip]; ok &#123;</span><br><span class="line">            addresses := []v1.EndpointAddress&#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> ip = <span class="keyword">range</span> nodeIp &#123;</span><br><span class="line">                addr := v1.EndpointAddress&#123;&#125;</span><br><span class="line">                addr.IP = ip</span><br><span class="line">                addresses = <span class="built_in">append</span>(addresses, addr)</span><br><span class="line">            &#125;</span><br><span class="line">            kubeletEpName := <span class="string">"kubelet"</span></span><br><span class="line">            re, err := serviceDiscovery.CreateKubernetesEndpoints(<span class="string">"monitoring"</span>, kubeletEpName, <span class="string">"kubernetes-kubelet"</span>, <span class="number">10250</span>, <span class="string">"https-metrics"</span>, v1.ProtocolTCP, addresses, <span class="literal">true</span>)</span><br><span class="line">            <span class="keyword">if</span> !re &#123;</span><br><span class="line">                <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                    util.Logger.Error(fmt.Sprintf(<span class="string">"create Endpoints error is %v"</span>, err.Error()))</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    util.Logger.Infof(fmt.Sprintf(<span class="string">"Endpoints %v 已存在,退出"</span>, kubeletEpName))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> err</span><br></pre></td></tr></table></figure><p><a href="https://gorm.io/zh_CN/docs/advanced_query.html" target="_blank" rel="noopener">https://gorm.io/zh_CN/docs/advanced_query.html</a></p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "15743-1570943068343-906",        "name": "大数据实战演练",        "qrcode": "https://gcore.jsdelivr.net/gh/841809077/blog-img/20181110/20181118235726.jpg",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1、零值字段也更新&quot;&gt;&lt;a href=&quot;#1、零值字段也更新&quot; class=&quot;headerlink&quot; title=&quot;1、零值字段也更新&quot;&gt;&lt;/a&gt;1、零值字段也更新&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// gorm特性，当用struct更新时，里面的零值是不会被更新的，需要转换为map，这样零值也可被更新&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hostsMap := structs.Map(&amp;amp;hosts)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 更新集群相关信息，忽略对id字段的更新&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dbUpdate := tx.Model(&amp;amp;hosts).Where(&lt;span class=&quot;string&quot;&gt;&quot;ip = ?&quot;&lt;/span&gt;, hosts.Ip).Omit(&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;).Updates(hostsMap)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err = dbUpdate.Error; err != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; dbUpdate.RowsAffected == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; errors.New(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;Node ip [%s] was not exists.&quot;&lt;/span&gt;, ip))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="GoLang" scheme="https://841809077.github.io/categories/GoLang/"/>
    
    
  </entry>
  
  <entry>
    <title>基于commons-compress实现目录的tar.gz压缩与解压，支持8GB大文件</title>
    <link href="https://841809077.github.io/2022/04/03/Spring%20boot/commons-compress-file-compress.html"/>
    <id>https://841809077.github.io/2022/04/03/Spring boot/commons-compress-file-compress.html</id>
    <published>2022-04-02T23:44:25.000Z</published>
    <updated>2022-05-30T03:23:25.816Z</updated>
    
    <content type="html"><![CDATA[<div id="vip-container"><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>直接复制代码就可以用，实现了格式为tar.gz的压缩格式，也可以实现8GB以上的大文件的压缩与解压，主要是在解压的逻辑中添加了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可压缩大于8GB的文件</span></span><br><span class="line">tOut.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);</span><br><span class="line"><span class="comment">// 可压缩长名称文件</span></span><br><span class="line">tOut.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);</span><br></pre></td></tr></table></figure><p>具体可参考：</p><ul><li><a href="https://issues.apache.org/jira/browse/COMPRESS-194" target="_blank" rel="noopener">https://issues.apache.org/jira/browse/COMPRESS-194</a></li><li><a href="https://commons.apache.org/proper/commons-compress/javadocs/api-1.20/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.html" target="_blank" rel="noopener">https://commons.apache.org/proper/commons-compress/javadocs/api-1.20/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.html</a></li></ul><h3 id="二、pom依赖"><a href="#二、pom依赖" class="headerlink" title="二、pom依赖"></a>二、pom依赖</h3><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-compress<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><p>压缩时支持超过8GB的大文件、长名称压缩，压缩完成后，会在压缩文件中，创建一个子目录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * http://www.imooc.com/article/309519</span></span><br><span class="line"><span class="comment">     * 压缩并删除原目录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataPath 要压缩的目录路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dirName  压缩包里面的目录名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException ioexception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compressTarGzip</span><span class="params">(String dataPath, String dirName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 被压缩打包的文件夹</span></span><br><span class="line">    Path source = Paths.get(dataPath);</span><br><span class="line">    <span class="comment">//如果不是文件夹抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (!Files.isDirectory(source)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"请指定一个文件夹"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//压缩之后的输出文件名称</span></span><br><span class="line">    String tarFileName = dataPath + <span class="string">".tar.gz"</span>;</span><br><span class="line">    logger.info(<span class="string">"正在执行文件压缩: [&#123;&#125;]"</span>, dataPath);</span><br><span class="line">    <span class="comment">//OutputStream输出流、BufferedOutputStream缓冲输出流</span></span><br><span class="line">    <span class="comment">//GzipCompressorOutputStream是gzip压缩输出流</span></span><br><span class="line">    <span class="comment">//TarArchiveOutputStream打tar包输出流（包含gzip压缩输出流）</span></span><br><span class="line">    <span class="keyword">try</span> (OutputStream fOut = Files.newOutputStream(Paths.get(tarFileName));</span><br><span class="line">         BufferedOutputStream buffOut = <span class="keyword">new</span> BufferedOutputStream(fOut);</span><br><span class="line">         GzipCompressorOutputStream gzOut = <span class="keyword">new</span> GzipCompressorOutputStream(buffOut);</span><br><span class="line">         TarArchiveOutputStream tOut = <span class="keyword">new</span> TarArchiveOutputStream(gzOut)) &#123;</span><br><span class="line">        <span class="comment">//遍历文件目录树</span></span><br><span class="line">        Files.walkFileTree(source, <span class="keyword">new</span> SimpleFileVisitor&lt;Path&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//当成功访问到一个文件</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">visitFile</span><span class="params">(Path file,</span></span></span><br><span class="line"><span class="function"><span class="params">                                             BasicFileAttributes attributes)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断当前遍历文件是不是符号链接(快捷方式)，不做打包压缩处理</span></span><br><span class="line">                <span class="keyword">if</span> (attributes.isSymbolicLink()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取当前遍历文件名称</span></span><br><span class="line">                Path targetFile = source.relativize(file);</span><br><span class="line">                <span class="comment">// 附带要压缩的目录名</span></span><br><span class="line">                targetFile = Paths.get(dirName, targetFile.toString());</span><br><span class="line"></span><br><span class="line">                <span class="comment">//将该文件打包压缩</span></span><br><span class="line">                TarArchiveEntry tarEntry = <span class="keyword">new</span> TarArchiveEntry(</span><br><span class="line">                    file.toFile(), targetFile.toString());</span><br><span class="line">                <span class="comment">// 可压缩大于8GB的文件</span></span><br><span class="line">                tOut.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);</span><br><span class="line">                <span class="comment">// 可压缩长名称文件</span></span><br><span class="line">                tOut.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);</span><br><span class="line">                tOut.putArchiveEntry(tarEntry);</span><br><span class="line">                Files.copy(file, tOut);</span><br><span class="line">                tOut.closeArchiveEntry();</span><br><span class="line">                <span class="comment">//继续下一个遍历文件处理</span></span><br><span class="line">                <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//当前遍历文件访问失败</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">visitFileFailed</span><span class="params">(Path file, IOException exc)</span> </span>&#123;</span><br><span class="line">                logger.error(<span class="string">"无法对该文件压缩打包为tar.gz, &#123;&#125;"</span>, file, exc);</span><br><span class="line">                <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//for循环完成之后，finish-tar包输出流</span></span><br><span class="line">        tOut.finish();</span><br><span class="line">        FileUtils.forceDelete(<span class="keyword">new</span> File(dataPath));</span><br><span class="line">        logger.info(<span class="string">"相关备份文件已压缩: [&#123;&#125;]"</span>, tarFileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解压tar.gz压缩包</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 解压文件路径，示例：D:\BaiduNetdiskDownload\xxx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 解压到的目录，示例：D:\BaiduNetdiskDownload</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException ioexception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unCompressTarGzip</span><span class="params">(String file, String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//解压文件</span></span><br><span class="line">    Path source = Paths.get(file + <span class="string">".tar.gz"</span>);</span><br><span class="line">    <span class="comment">//解压到哪</span></span><br><span class="line">    Path target = Paths.get(path);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Files.notExists(source)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"解压文件不存在"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    logger.info(<span class="string">"正在执行文件解压: [&#123;&#125;]"</span>, file + <span class="string">".tar.gz"</span>);</span><br><span class="line">    <span class="comment">//InputStream输入流，以下四个流将tar.gz读取到内存并操作</span></span><br><span class="line">    <span class="comment">//BufferedInputStream缓冲输入流</span></span><br><span class="line">    <span class="comment">//GzipCompressorInputStream解压输入流</span></span><br><span class="line">    <span class="comment">//TarArchiveInputStream解tar包输入流</span></span><br><span class="line">    <span class="keyword">try</span> (InputStream fi = Files.newInputStream(source);</span><br><span class="line">         BufferedInputStream bi = <span class="keyword">new</span> BufferedInputStream(fi);</span><br><span class="line">         GzipCompressorInputStream gzi = <span class="keyword">new</span> GzipCompressorInputStream(bi);</span><br><span class="line">         TarArchiveInputStream ti = <span class="keyword">new</span> TarArchiveInputStream(gzi)) &#123;</span><br><span class="line"></span><br><span class="line">        ArchiveEntry entry;</span><br><span class="line">        <span class="keyword">while</span> ((entry = ti.getNextEntry()) != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取解压文件目录，并判断文件是否损坏</span></span><br><span class="line">            Path newPath = zipSlipProtect(entry, target);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (entry.isDirectory()) &#123;</span><br><span class="line">                <span class="comment">//创建解压文件目录</span></span><br><span class="line">                Files.createDirectories(newPath);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//再次校验解压文件目录是否存在</span></span><br><span class="line">                Path parent = newPath.getParent();</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (Files.notExists(parent)) &#123;</span><br><span class="line">                        Files.createDirectories(parent);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 将解压文件输入到TarArchiveInputStream，输出到磁盘newPath目录</span></span><br><span class="line">                Files.copy(ti, newPath, StandardCopyOption.REPLACE_EXISTING);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    logger.info(<span class="string">"相关文件已解压完成，路径: [&#123;&#125;]"</span>, path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、参考博客"><a href="#四、参考博客" class="headerlink" title="四、参考博客"></a>四、参考博客</h3><p><a href="http://www.imooc.com/article/309519" target="_blank" rel="noopener">http://www.imooc.com/article/309519</a> ，里面有详细的解释，也有对单文件的压缩示例。</p></div><script src="https://my.openwrite.cn/js/readmore.js" type="text/javascript"></script><script>var isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);if (!isMobile) {    var btw = new BTWPlugin();    btw.init({        "id": "vip-container",        "blogId": "15743-1570943068343-906",        "name": "大数据实战演练",        "qrcode": "https://gcore.jsdelivr.net/gh/841809077/blog-img/20181110/20181118235726.jpg",        "keyword": "vip"    });}</script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;直接复制代码就可以用，实现了格式为tar.gz的压缩格式，也可以实现8GB以上的大文件的压缩与解压，主要是在解压的逻辑中添加了：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 可压缩大于8GB的文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tOut.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 可压缩长名称文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tOut.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;具体可参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/COMPRESS-194&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://issues.apache.org/jira/browse/COMPRESS-194&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://commons.apache.org/proper/commons-compress/javadocs/api-1.20/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://commons.apache.org/proper/commons-compress/javadocs/api-1.20/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;二、pom依赖&quot;&gt;&lt;a href=&quot;#二、pom依赖&quot; class=&quot;headerlink&quot; title=&quot;二、pom依赖&quot;&gt;&lt;/a&gt;二、pom依赖&lt;/h3&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://841809077.github.io/categories/springboot/"/>
    
    
  </entry>
  
</feed>
